/*************************************************************************
 > EE569 Homework Assignment #2
 > Date:     February 24, 2017
 > Author:   Chenyu Peng
 > ID:       3498-8893-91
 > email:    chenyupe@usc.edu

 > Compiled on OS X with gcc
 > Input: g++ -o shrinking shrinking.cpp
 		  ./shrinking squares.raw 480 480
 ************************************************************************/

#include <stdio.h>
#include <iostream>
#include <stdlib.h>
#include <cmath>

using namespace std;

unsigned char shrinking[58][8] = {{0,0,255,0,0,0,0,0},{255,0,0,0,0,0,0,0},{0,0,0,0,0,255,0,0},{0,0,0,0,0,0,0,255},                                                 //s_bond1
								{0,0,0,0,255,0,0,0},{0,255,0,0,0,0,0,0},{0,0,0,255,0,0,0,0},{0,0,0,0,0,0,255,0},                                                   //s_bond2
								{0,0,255,0,255,0,0,0},{0,255,255,0,0,0,0,0},{255,255,0,0,0,0,0,0},{255,0,0,255,0,0,0,0},                                           //s_bond3
								{0,0,0,255,0,255,0,0},{0,0,0,0,0,255,255,0},{0,0,0,0,0,0,255,255},{0,0,0,0,255,0,0,255},
								{0,0,255,0,255,0,0,255},{255,255,255,0,0,0,0,0},{255,0,0,255,0,255,0,0},{0,0,0,0,0,255,255,255},                                   //stk_bond4
								{255,255,0,0,255,0,0,0},{0,255,0,0,255,0,0,255},{0,255,255,255,0,0,0,0},{0,0,255,0,255,0,255,0},                                   //st_bond5
								{0,255,255,0,255,0,0,0},{255,255,0,255,0,0,0,0},{0,0,0,255,0,255,255,0},{0,0,0,0,255,0,255,255},                                   //st_bond5
								{255,255,0,0,255,0,0,255},{0,255,255,255,0,255,0,0},                                                                               //st_bond6
								{255,255,255,0,255,0,0,0},{0,255,255,0,255,0,0,255},{255,255,255,255,0,0,0,0},{255,255,0,255,0,255,0,0},                           //stk_bond6
								{255,0,0,255,0,255,255,0},{0,0,0,255,0,255,255,255},{0,0,0,0,255,255,255,255},{0,0,255,0,255,0,255,255},
								{255,255,255,0,255,0,0,255},{255,255,255,255,0,255,0,0},{255,0,0,255,0,255,255,255},{0,0,255,0,255,255,255,255},                   //stk_bond7
								{0,255,255,0,255,0,255,255},{255,255,255,255,255,0,0,0},{255,255,0,255,0,255,255,0},{0,0,0,255,255,255,255,255},                   //stk_bond8
								{255,255,255,0,255,0,255,255},{0,255,255,0,255,255,255,255},{255,255,255,255,255,255,0,0},{255,255,255,255,255,0,0,255},           //stk_bond9
								{255,255,255,255,0,255,255,0},{255,255,0,255,0,255,255,255},{255,0,0,255,255,255,255,255},{0,0,255,255,255,255,255,255},
								{255,255,255,0,255,255,255,255},{255,255,255,255,255,255,0,255},{255,255,255,255,0,255,255,255},{255,0,255,255,255,255,255,255}};  //stk_bond10

unsigned char shrinking_uncond[200][8] = {{0,0,255,0,0,0,0,0},{255,0,0,0,0,0,0,0},                                                                                    //1
										{0,0,0,0,0,0,255,0},{0,0,0,0,255,0,0,0},                                                                                   //2
										{0,0,255,0,255,0,0,0},{0,255,255,0,0,0,0,0},{255,255,0,0,0,0,0,0},{255,0,0,255,0,0,0,0},                                   //3
										{0,0,0,255,0,255,0,0},{0,0,0,0,0,255,255,0},{0,0,0,0,0,0,255,255},{0,0,0,0,255,0,0,255},
										{0,255,255,255,0,0,0,0},{255,255,0,0,255,0,0,0},{0,255,0,0,255,0,0,255},{0,0,255,0,255,0,255,0},                           //4
										{0,0,255,0,255,255,0,0},{255,0,0,255,0,0,0,255},{0,0,255,0,0,255,255,0},{255,0,0,0,0,0,255,255},                           //5
										{0,255,255,0,0,255,0,0},{255,255,0,0,0,0,0,255},{0,0,255,255,0,255,0,0},{255,0,0,0,255,0,0,255},
										{255,255,0,255,0,0,0,0},{255,255,0,255,0,0,0,255},{255,255,0,255,0,0,255,0},{255,255,0,255,0,0,255,255},                   //6
										{255,255,0,255,0,255,0,0},{255,255,0,255,0,255,0,255},{255,255,0,255,0,255,255,0},{255,255,0,255,0,255,255,255},
										{255,255,0,255,255,0,0,0},{255,255,0,255,255,0,0,255},{255,255,0,255,255,0,255,0},{255,255,0,255,255,0,255,255},
										{255,255,0,255,255,255,0,0},{255,255,0,255,255,255,0,255},{255,255,0,255,255,255,255,0},{255,255,0,255,255,255,255,255},
										{255,255,255,255,0,0,0,0},{255,255,255,255,0,0,0,255},{255,255,255,255,0,0,255,0},{255,255,255,255,0,0,255,255},
										{255,255,255,255,0,255,0,0},{255,255,255,255,0,255,0,255},{255,255,255,255,0,255,255,0},{255,255,255,255,0,255,255,255},
										{255,255,255,255,255,0,0,0},{255,255,255,255,255,0,0,255},{255,255,255,255,255,0,255,0},{255,255,255,255,255,0,255,255},
										{255,255,255,255,255,255,0,0},{255,255,255,255,255,255,0,255},{255,255,255,255,255,255,255,0},{255,255,255,255,255,255,255,255},
										{0,255,0,255,255,0,0,0},{0,255,0,255,255,0,0,0},{0,0,0,255,255,0,255,0},{0,0,0,255,255,0,255,0},                          //7
										{0,255,0,255,255,255,0,0},{0,255,0,255,255,0,0,255},{0,0,0,255,255,0,255,255},{0,0,0,255,255,255,255,0},
										{255,255,0,255,255,0,0,0},{0,255,255,255,255,0,0,0},{0,0,255,255,255,0,255,0},{255,0,0,255,255,0,255,0},
										{255,255,0,255,255,255,0,0},{0,255,255,255,255,0,0,255},{0,0,255,255,255,0,255,255},{255,0,0,255,255,255,255,0},
										{0,255,0,255,0,0,255,0},{0,255,0,255,0,0,255,0},{0,255,0,0,255,0,255,0},{0,255,0,0,255,0,255,0},
										{0,255,255,255,0,0,255,0},{0,255,0,255,0,0,255,255},{0,255,0,0,255,0,255,255},{0,255,255,0,255,0,255,0},
										{255,255,0,255,0,0,255,0},{0,255,0,255,0,255,255,0},{0,255,0,0,255,255,255,0},{255,255,0,0,255,0,255,0},
										{255,255,255,255,0,0,255,0},{0,255,0,255,0,255,255,255},{0,255,0,0,255,255,255,255},{255,255,255,0,255,0,255,0},
										{255,0,255,0,0,0,0,255},{255,0,0,0,0,255,0,255},{0,0,255,0,0,255,0,255},{0,0,255,0,0,255,0,255},                          //8
										{255,0,255,0,0,0,255,0},{255,0,0,0,255,255,0,0},{0,255,0,0,0,255,0,255},{0,0,255,255,0,0,0,255},
										{255,0,255,0,0,255,0,0},{255,0,255,0,0,255,0,0},{255,0,0,0,0,255,0,255},{255,0,255,0,0,0,0,255},
										{255,0,255,0,255,0,0,255},{255,0,0,0,0,255,255,255},{0,0,255,0,0,255,255,255},{0,0,255,0,0,255,255,255},
										{255,0,255,0,255,0,255,0},{255,0,0,0,255,255,255,0},{0,255,0,0,0,255,255,255},{0,0,255,255,0,0,255,255},
										{255,0,255,0,255,255,0,0},{255,0,255,0,0,255,255,0},{255,0,0,0,0,255,255,255},{255,0,255,0,0,0,255,255},
										{255,0,255,255,0,0,0,255},{255,0,0,255,0,255,0,255},{0,0,255,0,255,255,0,255},{0,0,255,0,255,255,0,255},
										{255,0,255,255,0,0,255,0},{255,0,0,255,255,255,0,0},{0,255,0,0,255,255,0,255},{0,0,255,255,255,0,0,255},
										{255,0,255,255,0,255,0,0},{255,0,255,255,0,255,0,0},{255,0,0,0,255,255,0,255},{255,0,255,0,255,0,0,255},
										{255,0,255,255,255,0,0,255},{255,0,0,255,0,255,255,255},{0,0,255,0,255,255,255,255},{0,0,255,0,255,255,255,255},
										{255,0,255,255,255,0,255,0},{255,0,0,255,255,255,255,0},{0,255,0,0,255,255,255,255},{0,0,255,255,255,0,255,255},
										{255,0,255,255,255,255,0,0},{255,0,255,255,0,255,255,0},{255,0,0,0,255,255,255,255},{255,0,255,0,255,0,255,255},
										{255,255,255,0,0,0,0,255},{255,255,0,0,0,255,0,255},{0,0,255,255,0,255,0,255},{0,255,255,0,0,255,0,255},
										{255,255,255,0,0,0,255,0},{255,255,0,0,255,255,0,0},{0,255,0,255,0,255,0,255},{0,255,255,255,0,0,0,255},
										{255,255,255,0,0,255,0,0},{255,255,255,0,0,255,0,0},{255,0,0,255,0,255,0,255},{255,255,255,0,0,0,0,255},
										{255,255,255,0,255,0,0,255},{255,255,0,0,0,255,255,255},{0,0,255,255,0,255,255,255},{0,255,255,0,0,255,255,255},
										{255,255,255,0,255,0,255,0},{255,255,0,0,255,255,255,0},{0,255,0,255,0,255,255,255},{0,255,255,255,0,0,255,255},
										{255,255,255,0,255,255,0,0},{255,255,255,0,0,255,255,0},{255,0,0,255,0,255,255,255},{255,255,255,0,0,0,255,255},
										{255,255,255,255,0,0,0,255},{255,255,0,255,0,255,0,255},{0,0,255,255,255,255,0,255},{0,255,255,0,255,255,0,255},
										{255,255,255,255,0,0,255,0},{255,255,0,255,255,255,0,0},{0,255,0,255,255,255,0,255},{0,255,255,255,255,0,0,255},
										{255,255,255,255,0,255,0,0},{255,255,255,255,0,255,0,0},{255,0,0,255,255,255,0,255},{255,255,255,0,255,0,0,255},
										{255,255,255,255,255,0,0,255},{255,255,0,255,0,255,255,255},{0,0,255,255,255,255,255,255},{0,255,255,0,255,255,255,255},
										{255,255,255,255,255,0,255,0},{255,255,0,255,255,255,255,0},{0,255,0,255,255,255,255,255},{0,255,255,255,255,0,255,255},
										{255,255,255,255,255,255,0,0},{255,255,255,255,0,255,255,0},{255,0,0,255,255,255,255,255},{255,255,255,0,255,0,255,255},
										{0,255,0,0,255,255,0,0},{0,255,0,255,0,0,0,255},{0,0,255,255,0,0,255,0},{255,0,0,0,255,0,255,0},                          //9
										{0,255,0,0,255,255,0,255},{0,255,0,255,0,255,0,255},{0,0,255,255,0,0,255,255},{255,0,0,0,255,255,255,0},
										{255,255,0,0,255,255,0,0},{0,255,255,255,0,0,0,255},{255,0,255,255,0,0,255,0},{255,0,255,0,255,0,255,0},
										{255,255,0,0,255,255,0,255},{0,255,255,255,0,255,0,255},{255,0,255,255,0,0,255,255},{255,0,255,0,255,255,255,0}};

unsigned char count_pixel[8] = {0,0,0,0,0,0,0,0};

int main(int argc, char *argv[])
{
	FILE *file;
	int BytesPerPixel = 1;
	int Length = 0;
	int Width = 0;
	
	if (argc < 4)
	{
		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;
		cout << "program_name input_image.raw Length Width" << endl;
		return 0;
	}
	if (argc >= 4)
	{
		Length = atoi(argv[2]);
		Width = atoi(argv[3]);
	}

	unsigned char Imagedata[Width][Length][BytesPerPixel];

	if (!(file=fopen(argv[1],"rb"))) {
		cout << "Cannot open file: " << argv[1] <<endl;
		exit(1);
	}
	fread(Imagedata, sizeof(unsigned char), Length*Width*BytesPerPixel, file);
	fclose(file);

	unsigned char ImageTrans1[Width+2][Length+2][BytesPerPixel];
	unsigned char ImageTrans2[Width][Length][BytesPerPixel];
	unsigned char ImageTrans3[Width+2][Length+2][BytesPerPixel];
	unsigned char ImageTrans4[Width][Length][BytesPerPixel];

	for(int i=0; i<Width; i++)
		for(int j=0; j<Length; j++)
			for(int k=0; k<BytesPerPixel; k++)
				ImageTrans1[i+1][j+1][k] = Imagedata[i][j][k];

	unsigned char array_temp[8];
	bool break_flag_1 = true;
	bool break_flag_2 = true;
	bool break_flag_3 = false;
	bool break_flag_4 = true;
	bool break_flag_5 = true;

	bool break_flag_6 = true;

	int square_size[10];
	memset(square_size,0,sizeof(square_size));

	for(int i=0; i<Width; i++)
		for(int j=0; j<Length; j++)
			for(int k=0; k<BytesPerPixel; k++)
			{
				if(ImageTrans1[i+1][j+1][k]==255)
				{
					break_flag_6 = true;
					array_temp[0] = ImageTrans1[i][j][k];
					array_temp[1] = ImageTrans1[i][j+1][k];
					array_temp[2] = ImageTrans1[i][j+2][k];
					array_temp[3] = ImageTrans1[i+1][j][k];
					array_temp[4] = ImageTrans1[i+1][j+2][k];
					array_temp[5] = ImageTrans1[i+2][j][k];
					array_temp[6] = ImageTrans1[i+2][j+1][k];
					array_temp[7] = ImageTrans1[i+2][j+2][k];
					for(int a=0; a<8&&break_flag_6; a++)
					{
						if(array_temp[a]!=count_pixel[a])
							break_flag_6 = false;
					}
					if(break_flag_6)
					{
						square_size[0]++;
					}
				}
			}
//	cout << square_size[0] << endl;
	int loop_num=0;

	while(!break_flag_3)
	{
		loop_num++;
		memset(ImageTrans2,0,sizeof(ImageTrans2));
		for(int i=0; i<Width; i++)
			for(int j=0; j<Length; j++)
				for(int k=0; k<BytesPerPixel; k++)
				{
					if(ImageTrans1[i+1][j+1][k]==255)
					{
						break_flag_2 = true;
						array_temp[0] = ImageTrans1[i][j][k];
						array_temp[1] = ImageTrans1[i][j+1][k];
						array_temp[2] = ImageTrans1[i][j+2][k];
						array_temp[3] = ImageTrans1[i+1][j][k];
						array_temp[4] = ImageTrans1[i+1][j+2][k];
						array_temp[5] = ImageTrans1[i+2][j][k];
						array_temp[6] = ImageTrans1[i+2][j+1][k];
						array_temp[7] = ImageTrans1[i+2][j+2][k];
						for(int a=0; a<58&&break_flag_2; a++)
						{
							break_flag_1 = true;
							for(int b=0; b<8&&break_flag_1; b++)
							{
								if(array_temp[b]!=shrinking[a][b])
									break_flag_1 = false;
							}
							if(break_flag_1)
							{
								ImageTrans2[i][j][k] = 255;
								break_flag_2 = false;
							}
							else
								ImageTrans2[i][j][k] = 0;
						}
					}
				}

	for(int i=0; i<Width; i++)
		for(int j=0; j<Length; j++)
			for(int k=0; k<BytesPerPixel; k++)
				ImageTrans3[i+1][j+1][k] = ImageTrans2[i][j][k];

		for(int i=0; i<Width; i++)
			for(int j=0; j<Length; j++)
				for(int k=0; k<BytesPerPixel; k++)
				{
					if(ImageTrans3[i+1][j+1][k]==255)
					{
						break_flag_5 = true;
						array_temp[0] = ImageTrans3[i][j][k];
						array_temp[1] = ImageTrans3[i][j+1][k];
						array_temp[2] = ImageTrans3[i][j+2][k];
						array_temp[3] = ImageTrans3[i+1][j][k];
						array_temp[4] = ImageTrans3[i+1][j+2][k];
						array_temp[5] = ImageTrans3[i+2][j][k];
						array_temp[6] = ImageTrans3[i+2][j+1][k];
						array_temp[7] = ImageTrans3[i+2][j+2][k];
						for(int a=0; a<200&&break_flag_5; a++)
						{
							break_flag_4 = true;
							for(int b=0; b<8&&break_flag_4; b++)
							{
								if(array_temp[b]!=shrinking_uncond[a][b])
									break_flag_4 = false;
							}
							if(break_flag_4)
							{
								ImageTrans1[i+1][j+1][k] = 255;
								break_flag_5 = false;
							}
							else
							{
								ImageTrans1[i+1][j+1][k] = 0;
							}
						}
					}
				}

		for(int i=0; i<Width; i++)
			for(int j=0; j<Length; j++)
				for(int k=0; k<BytesPerPixel; k++)
				{
					if(ImageTrans1[i+1][j+1][k]==255)
					{
						break_flag_6 = true;
						array_temp[0] = ImageTrans1[i][j][k];
						array_temp[1] = ImageTrans1[i][j+1][k];
						array_temp[2] = ImageTrans1[i][j+2][k];
						array_temp[3] = ImageTrans1[i+1][j][k];
						array_temp[4] = ImageTrans1[i+1][j+2][k];
						array_temp[5] = ImageTrans1[i+2][j][k];
						array_temp[6] = ImageTrans1[i+2][j+1][k];
						array_temp[7] = ImageTrans1[i+2][j+2][k];
						for(int a=0; a<8&&break_flag_6; a++)
						{
							if(array_temp[a]!=count_pixel[a])
								break_flag_6 = false;
						}
						if(break_flag_6)
						{
							square_size[loop_num]++;
						}
					}
				}

		break_flag_3 = true;
		for(int i=0; i<Width&&break_flag_3; i++)
			for(int j=0; j<Length&&break_flag_3; j++)
				for(int k=0; k<BytesPerPixel; k++)
				{
					if(ImageTrans2[i][j][k]==255)
						break_flag_3 = false;
				}
	}

	int squares_num = 0;
	for(int i=0; i<Width; i++)
		for(int j=0; j<Length; j++)
			for(int k=0; k<BytesPerPixel; k++)
			{
				ImageTrans4[i][j][k] = ImageTrans1[i+1][j+1][k];
				if(ImageTrans1[i+1][j+1][k]==255)
					squares_num++;
			}

	cout << "Total number of squares: " << squares_num << endl;
	cout << "1*1: " << square_size[0] << endl;
	for(int i=1; i<10; i++)
	{
		cout << 2*i << "*" << 2*i << " or " << 2*i+1 <<"*"<<2*i+1<< ": "<<square_size[i]-square_size[i-1]<< endl;
	}


	if (!(file=fopen("squares_shrinking.raw","wb"))) {
		cout << "Cannot open file: " << "squares_shrinking.raw" << endl;
		exit(1);
	}
	fwrite(ImageTrans4, sizeof(unsigned char), Length*Width*BytesPerPixel, file);
	fclose(file);

	return 0;
}
